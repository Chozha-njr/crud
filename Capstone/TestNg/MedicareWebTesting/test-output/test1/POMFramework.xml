<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="9" hostname="LAPTOP-8O3S0JOC" failures="1" tests="9" name="POMFramework" time="15.585" errors="0" timestamp="2023-12-23T16:41:28 IST">
  <testcase classname="medicare.base.Base" name="@AfterMethod generateTestStatus" time="-1.703329886289E9">
    <failure type="org.testng.TestNGException" message="
Can inject only one of &amp;lt;ITestContext, XmlTest, Method, Object[], ITestResult&amp;gt; into a @AfterMethod annotated generateTestStatus.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection">
      <![CDATA[org.testng.TestNGException: 
Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @AfterMethod annotated generateTestStatus.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 29 stack frames]]>
    </failure>
  </testcase> <!-- @AfterMethod generateTestStatus -->
  <testcase classname="medicare.base.Base" name="@AfterMethod generateTestStatus" time="-1.703329887136E9">
    <failure type="org.testng.TestNGException" message="
Can inject only one of &amp;lt;ITestContext, XmlTest, Method, Object[], ITestResult&amp;gt; into a @AfterMethod annotated generateTestStatus.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection">
      <![CDATA[org.testng.TestNGException: 
Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @AfterMethod annotated generateTestStatus.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 29 stack frames]]>
    </failure>
  </testcase> <!-- @AfterMethod generateTestStatus -->
  <testcase classname="medicare.base.Base" name="@AfterMethod generateTestStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod generateTestStatus -->
  <testcase classname="medicare.base.Base" name="@AfterMethod generateTestStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod generateTestStatus -->
  <testcase classname="medicare.base.Base" name="@AfterMethod generateTestStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod generateTestStatus -->
  <testcase classname="medicare.base.Base" name="@AfterMethod generateTestStatus" time="-1.70332988867E9">
    <failure type="org.testng.TestNGException" message="
Can inject only one of &amp;lt;ITestContext, XmlTest, Method, Object[], ITestResult&amp;gt; into a @AfterMethod annotated generateTestStatus.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection">
      <![CDATA[org.testng.TestNGException: 
Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @AfterMethod annotated generateTestStatus.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 29 stack frames]]>
    </failure>
  </testcase> <!-- @AfterMethod generateTestStatus -->
  <testcase classname="medicare.base.Base" name="@AfterMethod generateTestStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod generateTestStatus -->
  <testcase classname="medicare.base.Base" name="@AfterMethod generateTestStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod generateTestStatus -->
  <testcase classname="medicare.testpages.RegisterPageTest" name="RegisterUser" time="0.561">
    <failure type="org.testng.internal.reflect.MethodMatcherException" message="
[public void medicare.testpages.RegisterPageTest.RegisterUser(java.lang.String,java.lang.String,java.lang.String)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: RegisterUser([java.lang.String arg0, java.lang.String arg1, java.lang.String arg2])
Arguments: [(java.lang.String) john,(java.lang.String) Donald,(java.lang.String) john.d189@demogmail.com,(java.lang.String) 4.455664466E9,(java.lang.String) 12345.0,(java.lang.String) 12345.0,(java.lang.String) jhon,(java.lang.String) demo1@gmail.com,(java.lang.String) 1234.0]">
      <![CDATA[org.testng.internal.reflect.MethodMatcherException: 
[public void medicare.testpages.RegisterPageTest.RegisterUser(java.lang.String,java.lang.String,java.lang.String)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: RegisterUser([java.lang.String arg0, java.lang.String arg1, java.lang.String arg2])
Arguments: [(java.lang.String) john,(java.lang.String) Donald,(java.lang.String) john.d189@demogmail.com,(java.lang.String) 4.455664466E9,(java.lang.String) 12345.0,(java.lang.String) 12345.0,(java.lang.String) jhon,(java.lang.String) demo1@gmail.com,(java.lang.String) 1234.0]
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 22 stack frames]]>
    </failure>
  </testcase> <!-- RegisterUser -->
  <testcase classname="medicare.testpages.LoginPageTest" name="test_login" time="2.021"/>
  <testcase classname="medicare.testpages.AddProductToCartTest" name="test_login" time="0.842"/>
  <testcase classname="medicare.testpages.AddProductToCartTest" name="ViewProducts" time="0.0">
    <skipped/>
  </testcase> <!-- ViewProducts -->
  <testcase classname="medicare.testpages.AddProductToCartTest" name="test_add_product_to_cart" time="0.0">
    <skipped/>
  </testcase> <!-- test_add_product_to_cart -->
  <testcase classname="medicare.testpages.AddProductToCartTest" name="cart" time="0.0">
    <skipped/>
  </testcase> <!-- cart -->
  <testcase classname="medicare.testpages.PlaceOrderPageTest" name="test_login" time="1.504"/>
  <testcase classname="medicare.testpages.PlaceOrderPageTest" name="cart" time="0.0">
    <skipped/>
  </testcase> <!-- cart -->
  <testcase classname="medicare.testpages.PlaceOrderPageTest" name="PlaceOrder" time="0.0">
    <skipped/>
  </testcase> <!-- PlaceOrder -->
  <testcase classname="medicare.base.Base" name="@BeforeTest getnameMethod" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest getnameMethod -->
  <testcase classname="medicare.base.Base" name="@BeforeTest getnameMethod" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest getnameMethod -->
  <testcase classname="medicare.base.Base" name="@AfterSuite generateReports" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite generateReports -->
  <testcase classname="medicare.base.Base" name="@BeforeSuite InitalizeExtentReport" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite InitalizeExtentReport -->
  <testcase classname="medicare.base.Base" name="@BeforeTest getnameMethod" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest getnameMethod -->
  <testcase classname="medicare.base.Base" name="@AfterSuite generateReports" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite generateReports -->
  <testcase classname="medicare.base.Base" name="@BeforeSuite InitalizeExtentReport" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite InitalizeExtentReport -->
  <testcase classname="medicare.base.Base" name="@BeforeSuite InitalizeExtentReport" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite InitalizeExtentReport -->
  <testcase classname="medicare.base.Base" name="@AfterSuite generateReports" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite generateReports -->
</testsuite> <!-- POMFramework -->
